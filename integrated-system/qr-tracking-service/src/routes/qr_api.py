from flask import Blueprint, request, jsonify
from src.models.qr_code import db, QRCode, QRScan, UserSubscription
from src.models.user import User
import qrcode
import io
import base64
import requests
import json
from datetime import datetime, timedelta
from user_agents import parse

qr_bp = Blueprint("qr", __name__)

# QR Code 生成 API
@qr_bp.route("/qr-codes", methods=["POST"])
def create_qr_code():
    try:
        data = request.get_json()
        user_id = data.get("user_id")
        target_content = data.get("target_content")
        title = data.get("title", "")
        description = data.get("description", "")
        
        if not user_id or not target_content:
            return jsonify({"error": "缺少必要參數"}), 400
        
        # 檢查用戶是否存在
        user = User.query.get(user_id)
        if not user:
            return jsonify({"error": "用戶不存在"}), 404
        
        # 檢查用戶訂閱限制
        subscription = UserSubscription.query.filter_by(user_id=user_id, status="active").first()
        if not subscription:
            # 創建免費方案
            subscription = UserSubscription(
                user_id=user_id,
                plan_name="Free",
                max_qr_codes=5,
                max_scans_per_month=100
            )
            db.session.add(subscription)
        
        # 檢查 QR Code 數量限制
        current_qr_count = QRCode.query.filter_by(user_id=user_id, is_active=True).count()
        if current_qr_count >= subscription.max_qr_codes:
            return jsonify({"error": f"已達到 QR Code 數量限制 ({subscription.max_qr_codes})"}), 400
        
        # 創建新的 QR Code 記錄
        qr_code = QRCode(
            user_id=user_id,
            target_content=target_content,
            title=title,
            description=description
        )
        db.session.add(qr_code)
        db.session.commit() # Commit here to get the tracking_id generated by default
        
        # 生成 QR Code 圖片
        tracking_url = f"https://qr-tracker.example.com/scan/{qr_code.tracking_id}"
        qr = qrcode.QRCode(version=1, box_size=10, border=5)
        qr.add_data(tracking_url)
        qr.make(fit=True)
        
        img = qr.make_image(fill_color="black", back_color="white")
        img_buffer = io.BytesIO()
        img.save(img_buffer, format="PNG")
        img_buffer.seek(0)
        
        # 將圖片轉換為 base64
        img_base64 = base64.b64encode(img_buffer.getvalue()).decode()
        qr_code.qr_image_url = f"data:image/png;base64,{img_base64}"
        
        db.session.commit() # Commit again to save the qr_image_url
        
        # 觸發 n8n 工作流程（QR Code 創建通知）
        trigger_n8n_workflow("qr_code_created", {
            "qr_code_id": qr_code.id,
            "user_id": user_id,
            "tracking_id": qr_code.tracking_id,
            "target_content": target_content
        })
        
        return jsonify({
            "success": True,
            "qr_code": qr_code.to_dict(),
            "tracking_url": tracking_url
        }), 201
        
    except Exception as e:
        db.session.rollback()
        return jsonify({"error": str(e)}), 500

# QR Code 掃描記錄 API
@qr_bp.route("/scan/<tracking_id>", methods=["POST"])
def record_scan(tracking_id):
    try:
        # 查找 QR Code
        qr_code = QRCode.query.filter_by(tracking_id=tracking_id, is_active=True).first()
        if not qr_code:
            return jsonify({"error": "QR Code 不存在或已停用"}), 404
        
        # 獲取掃描資訊
        ip_address = request.remote_addr
        user_agent_string = request.headers.get("User-Agent", "")
        user_agent = parse(user_agent_string)
        
        # 創建掃描記錄
        scan = QRScan(
            qr_code_id=qr_code.id,
            ip_address=ip_address,
            user_agent=user_agent_string,
            device_type=user_agent.device.family,
            browser=f"{user_agent.browser.family} {user_agent.browser.version_string}",
            os=f"{user_agent.os.family} {user_agent.os.version_string}"
        )
        
        db.session.add(scan)
        db.session.commit()
        
        # 觸發 n8n 工作流程（掃描通知）
        trigger_n8n_workflow("qr_code_scanned", {
            "qr_code_id": qr_code.id,
            "scan_id": scan.id,
            "user_id": qr_code.user_id,
            "tracking_id": tracking_id,
            "ip_address": ip_address,
            "device_info": {
                "device_type": scan.device_type,
                "browser": scan.browser,
                "os": scan.os
            }
        })
        
        # 重定向到目標內容
        return jsonify({
            "success": True,
            "redirect_url": qr_code.target_content,
            "scan_id": scan.id
        }), 200
        
    except Exception as e:
        db.session.rollback()
        return jsonify({"error": str(e)}), 500

# 獲取用戶的 QR Code 列表
@qr_bp.route("/users/<user_id>/qr-codes", methods=["GET"])
def get_user_qr_codes(user_id):
    try:
        page = request.args.get("page", 1, type=int)
        per_page = request.args.get("per_page", 10, type=int)
        
        qr_codes = QRCode.query.filter_by(user_id=user_id, is_active=True)\
                              .order_by(QRCode.created_at.desc())\
                              .paginate(page=page, per_page=per_page, error_out=False)
        
        return jsonify({
            "qr_codes": [qr.to_dict() for qr in qr_codes.items],
            "total": qr_codes.total,
            "pages": qr_codes.pages,
            "current_page": page
        }), 200
        
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# 獲取 QR Code 詳細資訊和掃描統計
@qr_bp.route("/qr-codes/<qr_code_id>", methods=["GET"])
def get_qr_code_details(qr_code_id):
    try:
        qr_code = QRCode.query.get(qr_code_id)
        if not qr_code:
            return jsonify({"error": "QR Code 不存在"}), 404
        
        # 獲取掃描統計
        total_scans = QRScan.query.filter_by(qr_code_id=qr_code_id).count()
        today_scans = QRScan.query.filter_by(qr_code_id=qr_code_id)\
                                  .filter(QRScan.scanned_at >= datetime.utcnow().date()).count()
        
        # 獲取最近的掃描記錄
        recent_scans = QRScan.query.filter_by(qr_code_id=qr_code_id)\
                                   .order_by(QRScan.scanned_at.desc())\
                                   .limit(10).all()
        
        return jsonify({
            "qr_code": qr_code.to_dict(),
            "statistics": {
                "total_scans": total_scans,
                "today_scans": today_scans,
                "recent_scans": [scan.to_dict() for scan in recent_scans]
            }
        }), 200
        
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# 更新 QR Code
@qr_bp.route("/qr-codes/<qr_code_id>", methods=["PUT"])
def update_qr_code(qr_code_id):
    try:
        qr_code = QRCode.query.get(qr_code_id)
        if not qr_code:
            return jsonify({"error": "QR Code 不存在"}), 404
        
        data = request.get_json()
        
        if "title" in data:
            qr_code.title = data["title"]
        if "description" in data:
            qr_code.description = data["description"]
        if "is_active" in data:
            qr_code.is_active = data["is_active"]
        
        qr_code.updated_at = datetime.utcnow()
        db.session.commit()
        
        return jsonify({
            "success": True,
            "qr_code": qr_code.to_dict()
        }), 200
        
    except Exception as e:
        db.session.rollback()
        return jsonify({"error": str(e)}), 500

# 刪除 QR Code
@qr_bp.route("/qr-codes/<qr_code_id>", methods=["DELETE"])
def delete_qr_code(qr_code_id):
    try:
        qr_code = QRCode.query.get(qr_code_id)
        if not qr_code:
            return jsonify({"error": "QR Code 不存在"}), 404
        
        # 軟刪除
        qr_code.is_active = False
        qr_code.updated_at = datetime.utcnow()
        db.session.commit()
        
        return jsonify({"success": True, "message": "QR Code 已刪除"}), 200
        
    except Exception as e:
        db.session.rollback()
        return jsonify({"error": str(e)}), 500

# 獲取用戶訂閱資訊
@qr_bp.route("/users/<user_id>/subscription", methods=["GET"])
def get_user_subscription(user_id):
    try:
        subscription = UserSubscription.query.filter_by(user_id=user_id, status="active").first()
        if not subscription:
            return jsonify({"error": "未找到有效訂閱"}), 404
        
        # 計算當月使用量
        current_month_start = datetime.utcnow().replace(day=1, hour=0, minute=0, second=0, microsecond=0)
        user_qr_codes = QRCode.query.filter_by(user_id=user_id, is_active=True).all()
        qr_code_ids = [qr.id for qr in user_qr_codes]
        
        monthly_scans = 0
        if qr_code_ids:
            monthly_scans = QRScan.query.filter(
                QRScan.qr_code_id.in_(qr_code_ids),
                QRScan.scanned_at >= current_month_start
            ).count()
        
        return jsonify({
            "subscription": subscription.to_dict(),
            "usage": {
                "qr_codes_used": len(user_qr_codes),
                "scans_this_month": monthly_scans
            }
        }), 200
        
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# 觸發 n8n 工作流程的輔助函數
def trigger_n8n_workflow(workflow_name, data):
    try:
        # 這裡應該使用實際的 n8n 實例 URL 和 API 金鑰
        n8n_webhook_url = f"https://your-n8n-instance.zeabur.app/webhook/{workflow_name}"
        
        response = requests.post(
            n8n_webhook_url,
            json=data,
            headers={"Content-Type": "application/json"},
            timeout=10
        )
        
        if response.status_code == 200:
            print(f"Successfully triggered n8n workflow: {workflow_name}")
        else:
            print(f"Failed to trigger n8n workflow: {workflow_name}, Status: {response.status_code}")
            
    except Exception as e:
        print(f"Error triggering n8n workflow {workflow_name}: {str(e)}")

